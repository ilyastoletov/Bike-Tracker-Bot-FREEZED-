from aiogram import Router
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile

from keyboards.reply import menu_kb
from keyboards.reply import admin_kb
from utils.db_api.main import Database
from mailing import Mailing
from filters.admin import Adm
import datetime

mail = Mailing()
router = Router()
db = Database()

@router.message(Adm(), commands='admin')
async def admin_start(message:types.Message,state:FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç –∞–¥–º–∏–Ω",reply_markup=admin_kb)

@router.message(Adm(), text='–ù–∞–∑–∞–¥')
async def back_admin(m: types.Message):
    await m.answer('–ê–¥–º–∏–Ω –º–µ–Ω—é', reply_markup=admin_kb)

@router.message(text='–í –º–µ–Ω—é')
async def admin_cancel(message:types.Message,state:FSMContext):
    await state.clear()
    await message.answer("–ú–µ–Ω—é",reply_markup=menu_kb())

@router.message(Adm(), text='üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
async def stats_admin(m: types.Message):
    utcnow = datetime.datetime.utcnow()
    today = datetime.datetime(
        year=utcnow.year, month=utcnow.month, day=utcnow.day
    )
    yesterday = today - datetime.timedelta(days=1)
    week_ago = today - datetime.timedelta(days=7)

    registered_today = db.analyze_registered(today, utcnow)
    registered_source = db.analyze_registered(today, utcnow, "AND source is not null")
    registered_yesterday = db.analyze_registered(yesterday, today)
    registered_yesterday_source = db.analyze_registered(yesterday, today, "AND source is not null")
    invented_friends = db.analyze_registered(today, utcnow, "AND source ~ '^[0-9\.]+$'")
    invented_friends_yesterday = db.analyze_registered(yesterday, today, "AND source ~ '^[0-9\.]+$'")
    registered_week = db.analyze_registered(week_ago, today)
    all = db.analyze_all(active=False)
    all_active = db.analyze_all(active=True)
    blocked_today = db.analyze_blocked(today, utcnow)
    blocked_yesterday = db.analyze_blocked(yesterday, today)

    active_today = db.analyze_today(today, utcnow)

    text = f"""
üìâ–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –°—Ç–∞–Ω–¥–æ—Ñ—Ñ
    
    –í—Å–µ–≥–æ —é–∑–µ—Ä–æ–≤: {all} 
    –ê–∫—Ç–∏–≤–Ω—ã—Ö: {all_active} 

üíπ–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å
    –ó–∞ –¥–µ–Ω—å: {registered_today} (–° —Ä–µ–∫–ª {registered_source - invented_friends})
    –ó–∞ –≤—á–µ—Ä–∞: {registered_yesterday} (–° —Ä–µ–∫–ª {registered_yesterday_source - invented_friends_yesterday})
    –ó–∞ –Ω–µ–¥–µ–ª—é {registered_week}

üßæ–°–∞–º–æ—Ä–æ—Å—Ç
    –ó–∞ –¥–µ–Ω—å: {registered_today - (registered_source - invented_friends)}
    –° –¥—Ä—É–∑–µ–π –∑–∞ –¥–µ–Ω—å: {invented_friends}
    –ó–∞ –≤—á–µ—Ä–∞: {registered_yesterday - (registered_yesterday_source - invented_friends_yesterday)}
    C –¥—Ä—É–∑–µ–π –∑–∞ –≤—á–µ—Ä–∞: {invented_friends_yesterday}
    

‚õîÔ∏è–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏
    –ó–∞ –¥–µ–Ω—å: {blocked_today}
    –ó–∞ –≤—á–µ—Ä–∞ {blocked_yesterday}

üßΩ–ß–∏—Å—Ç—ã–º–∏
    –ß–∏—Å—Ç—ã–π –ø—Ä–∏—Ö–æ–¥ –∑–∞ –¥–µ–Ω—å: {registered_today - blocked_today}
    –ß–∏—Å—Ç—ã–π –ø—Ä–∏—Ö–æ–¥ –∑–∞ –≤—á–µ—Ä–∞: {registered_yesterday - blocked_yesterday}
    
üåü –ê–∫—Ç–∏–≤ –∑–∞ –¥–µ–Ω—å: {active_today}
    """
    await m.answer(text)
