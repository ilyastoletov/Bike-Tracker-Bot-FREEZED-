import datetime
from aiogram import types, Router
from aiogram.filters import Text
from aiogram.fsm.context import FSMContext
from keyboards.reply import sub_kb
from utils.db_api.main import Database
from states.admin import AdminSub
from keyboards.inline import admin_sub_kb
from filters.admin import Adm
import logging

router = Router()
db = Database()

@router.message(Adm(), text='üß©–û–±—è–∑.–ø–æ–¥–ø–∏—Å–∫–∞')
async def admin_sub_start(message: types.Message, state: FSMContext):
    await state.set_state(AdminSub.admin_sub)
    channels = db.get_channels(all=True)
    await message.answer("–ö–∞–Ω–∞–ª—ã: ", reply_markup=sub_kb)
    if channels:
        for channel in channels:
            admin_kb = admin_sub_kb('–£–¥–∞–ª–∏—Ç—å', callback_data=f'delete_{channel[1]}')
            await message.answer(
                f"–ö–∞–Ω–∞–ª: {channel[1]}\n–°—Å—ã–ª–∫–∞: {channel[2]}",reply_markup=admin_kb)
    else:
        await message.answer("–ö–∞–Ω–∞–ª–æ–≤ –Ω–µ—Ç")

@router.message(Adm(), text='‚úÖ–î–æ–±–∞–≤–∏—Ç—å –ö–∞–Ω–∞–ª', state=AdminSub.admin_sub)
async def admin_sub_add_id(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ id –∫–∞–Ω–∞–ª–∞, –ª–∏–±–æ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å –Ω–µ–≥–æ –ø–æ—Å—Ç")
    await state.set_state(AdminSub.admin_sub_id)

@router.message(Adm(), state=AdminSub.admin_sub_id)
async def admin_sub_add_link(message: types.Message, state: FSMContext):
    if message.forward_from_chat:
        channel_id = message.forward_from_chat.id
    else:
        channel_id = message.text
    await state.update_data(channel_id=channel_id)
    await state.set_state(AdminSub.admin_sub_link)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É: ")

@router.message(Adm(), state=AdminSub.admin_sub_link)
async def admin_sub_add_start(message: types.Message, state: FSMContext):
    channel_link = message.text

    await state.update_data(channel_link=channel_link)
    await state.set_state(AdminSub.admin_sub_start)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞: \n\n–ü—Ä–∏–º–µ—Ä: <code>2018-06-29 08:15</code> ")

@router.message(Adm(), state=AdminSub.admin_sub_start)
async def admin_sub_add_end(message: types.Message, state: FSMContext):
    date_start = message.text
    try:
        cheak = datetime.datetime.strptime(date_start, '%Y-%m-%d %H:%M')
    except ValueError:
        await message.answer("–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã\n\n–ü—Ä–∏–º–µ—Ä: <code>2018-06-29 08:15</code> ")
        return

    await state.update_data(date_start=date_start)
    await state.set_state(AdminSub.admin_sub_end)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∫–æ–Ω—Ü–∞ (–≤—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ UTC!): \n\n–ü—Ä–∏–º–µ—Ä: <code>2018-06-29 08:15</code> ")

@router.message(Adm(), state=AdminSub.admin_sub_end)
async def admin_sub_add(message: types.Message, state: FSMContext):
    data = await state.get_data()

    date_start = data.get('date_start')
    channel_link = data.get('channel_link')
    channel_id = data.get('channel_id')
    date_end = message.text
    try:
        date_end = datetime.datetime.strptime(date_end, '%Y-%m-%d %H:%M')
        date_start = datetime.datetime.strptime(date_start, '%Y-%m-%d %H:%M')
    except ValueError:
        await message.answer('–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã\n\n–ü—Ä–∏–º–µ—Ä: <code>2018-06-29 08:15</code> ')
        return
    await state.set_state(AdminSub.admin_sub)
    try:
        print(channel_id, channel_link, date_start, date_end)
        db.add_channel(channel_id, channel_link, date_start, date_end)
        await message.answer('–ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω')
    except Exception as e:
        logging.error(e)
        await message.answer('–û—à–∏–±–∫–∞')

    await admin_sub_start(message, state)

@router.callback_query(Adm(), Text(text_startswith='delete_'))
async def admin_sub_delete(callback: types.CallbackQuery):
    channel_id = int(callback.data.split('_')[-1])
    db.delete_channel(channel_id)
    await callback.message.edit_text('–ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω', reply_markup=None)
